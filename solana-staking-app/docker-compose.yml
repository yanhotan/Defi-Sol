services:
  solana-validator:
    image: solanalabs/solana:v1.14.17
    container_name: solana-validator
    ports:
      - "8899:8899"
      - "8900:8900"
      - "9900:9900"
    volumes:
      - ./target/deploy:/app/deploy
      - ./test-ledger:/test-ledger
    command: >
      bash -c "
        apt-get update && apt-get install -y curl netcat &&
        echo 'Starting validator...' &&
        mkdir -p /test-ledger &&
        solana-test-validator 
          --ledger /test-ledger
          --bind-address 0.0.0.0
          --rpc-port 8899
          --rpc-bind-address 0.0.0.0
          --reset
          --slots-per-epoch 32
          --tick-per-slot 8
          --quiet"
    healthcheck:
      test: ["CMD", "bash", "-c", "curl -s http://localhost:8899 -X POST -H 'Content-Type: application/json' -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getHealth\"}' | grep -q 'ok'"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 60s

  program-builder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: program-builder
    volumes:
      - .:/workspace
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/workspace/target
    working_dir: /workspace
    command: >
      bash -c "
        apt-get update && apt-get install -y curl &&
        echo 'Waiting for Solana validator...' &&
        while ! curl -sf http://solana-validator:8899 -X POST -H 'Content-Type: application/json' -d '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getHealth\"}'; do
          echo 'Validator not ready - sleeping 5s...'
          sleep 5
        done &&
        echo 'Validator is ready!' &&
        solana config set --url http://solana-validator:8899 &&
        solana-keygen new --no-bip39-passphrase --force -o /root/.config/solana/id.json &&
        echo 'Setting up project dependencies...' &&
        cd /workspace &&
        echo 'Building individual programs...' &&
        mkdir -p target/deploy programs/target/deploy &&
        chmod -R 777 target programs/target &&
        cd programs/locking-vault &&
        cargo build-sbf --sbf-out-dir /workspace/target/deploy &&
        cp -f /workspace/target/deploy/*.so /workspace/programs/target/deploy/ &&
        cd ../stablecoin-vault &&
        cargo build-sbf --sbf-out-dir /workspace/target/deploy &&
        cp -f /workspace/target/deploy/*.so /workspace/programs/target/deploy/ &&
        cd ../dual-product &&
        cargo build-sbf --sbf-out-dir /workspace/target/deploy &&
        cp -f /workspace/target/deploy/*.so /workspace/programs/target/deploy/ &&
        cd ../vault-sol &&
        cargo build-sbf --sbf-out-dir /workspace/target/deploy &&
        cp -f /workspace/target/deploy/*.so /workspace/programs/target/deploy/ &&
        cd /workspace &&
        echo 'Build complete!' &&
        ls -la target/deploy/ &&
        ls -la programs/target/deploy/ || echo 'Programs deploy directory not found' &&
        chmod -R 777 target programs/target &&
        touch /workspace/.build-complete &&
        # Keep the container running
        tail -f /dev/null"
    depends_on:
      solana-validator:
        condition: service_started
    healthcheck:
      test: ["CMD", "test", "-f", "/workspace/.build-complete"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 60s

  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    volumes:
      - .:/workspace
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/workspace/target
    working_dir: /workspace
    environment:
      - ANCHOR_PROVIDER_URL=http://solana-validator:8899
      - ANCHOR_WALLET=/workspace/.anchor/wallet/wallet.json
      - RUST_BACKTRACE=full
    command: >
      bash -c "
        echo 'Waiting for program builds to complete...' &&
        until [ -f /workspace/.build-complete ]; do
          echo 'Waiting for program builds...'
          sleep 2
        done &&
        echo 'Creating necessary target directories...' &&
        mkdir -p /workspace/programs/target/src &&
        mkdir -p /workspace/programs/target/deploy &&
        mkdir -p /workspace/programs/target/release &&
        mkdir -p /workspace/target/deploy &&
        chmod -R 777 /workspace/programs/target &&
        chmod -R 777 /workspace/target &&
        echo 'Checking for compiled program files:' &&
        ls -la /workspace/target/deploy/ &&
        ls -la /workspace/programs/target/deploy/ &&
        echo 'Running tests...' &&
        /workspace/run_tests.sh"
    depends_on:
      - program-builder

volumes:
  cargo-cache:
  target-cache: