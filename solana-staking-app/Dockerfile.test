FROM rust:1.73

# Install dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    build-essential \
    pkg-config \
    libssl-dev \
    libudev-dev \
    python3 \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install OpenSSL 1.1 from Debian backports
RUN mkdir -p /etc/apt/keyrings && \
    wget -qO - https://snapshot.debian.org/archive/debian/20230320T000000Z/pool/main/o/openssl/libssl1.1_1.1.1n-0+deb11u4_amd64.deb > /tmp/libssl1.1.deb && \
    dpkg -i /tmp/libssl1.1.deb && \
    rm -f /tmp/libssl1.1.deb

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash -
RUN apt-get update && apt-get install -y nodejs && rm -rf /var/lib/apt/lists/*

# Install Solana CLI tools with multiple fallback methods
RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/* && \
    mkdir -p /root/.local/share/solana/install/ && \
    # Method 1: Try direct download with retry
    ( \
      for i in {1..3}; do \
        echo "Method 1: Attempt $i to download Solana CLI..." && \
        if curl -sSfL --max-time 300 https://release.solana.com/v1.14.17/solana-release-x86_64-unknown-linux-gnu.tar.bz2 -o /tmp/solana.tar.bz2 && \
          tar -xjf /tmp/solana.tar.bz2 -C /root/.local/share/solana/install/ && \
          mv /root/.local/share/solana/install/solana-release/* /root/.local/share/solana/install/ && \
          rm /tmp/solana.tar.bz2; \
        then \
          echo "Method 1: Successfully installed Solana CLI"; \
          break; \
        else \
          rm -f /tmp/solana.tar.bz2; \
          if [ $i -eq 3 ]; then \
            echo "Method 1 failed, trying Method 2"; \
            # Method 2: Try alternative URL (Github directly)
            if curl -sSfL --max-time 300 https://github.com/solana-labs/solana/releases/download/v1.14.17/solana-release-x86_64-unknown-linux-gnu.tar.bz2 -o /tmp/solana.tar.bz2 && \
              tar -xjf /tmp/solana.tar.bz2 -C /root/.local/share/solana/install/ && \
              mv /root/.local/share/solana/install/solana-release/* /root/.local/share/solana/install/ && \
              rm /tmp/solana.tar.bz2; \
            then \
              echo "Method 2: Successfully installed Solana CLI"; \
            else \
              echo "Method 2 failed, trying Method 3"; \
              # Method 3: Try a different version that might be more stable
              if curl -sSfL --max-time 300 https://release.solana.com/v1.14.16/solana-release-x86_64-unknown-linux-gnu.tar.bz2 -o /tmp/solana.tar.bz2 && \
                tar -xjf /tmp/solana.tar.bz2 -C /root/.local/share/solana/install/ && \
                mv /root/.local/share/solana/install/solana-release/* /root/.local/share/solana/install/ && \
                rm /tmp/solana.tar.bz2; \
              then \
                echo "Method 3: Successfully installed Solana CLI (v1.14.16)"; \
              else \
                echo "All download methods failed"; \
                exit 1; \
              fi; \
            fi; \
          fi; \
        fi; \
        sleep 10; \
      done \
    )

ENV PATH="/root/.local/share/solana/install/bin:${PATH}"

# Verify Solana installation
RUN solana --version || { echo "Solana installation failed"; exit 1; }

# Install Anchor CLI
RUN npm install -g @project-serum/anchor-cli

# Set up working directory
WORKDIR /workspace

# Create ALL necessary target directories with proper permissions
RUN mkdir -p /workspace/programs/target/src \
    /workspace/programs/target/deploy \
    /workspace/programs/target/release \
    /workspace/programs/target/sbf-solana-solana/release \
    /workspace/target/deploy \
    && chmod -R 777 /workspace/programs/target \
    && chmod -R 777 /workspace/target

# Create a simple test script
RUN echo '#!/bin/bash' > /workspace/run_tests.sh && \
    echo 'set -xe' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo '# Show environment for debugging' >> /workspace/run_tests.sh && \
    echo 'echo "Current Rust version:"' >> /workspace/run_tests.sh && \
    echo 'rustc --version' >> /workspace/run_tests.sh && \
    echo 'echo "Current directory: $(pwd)"' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo '# Set environment variables for better debugging' >> /workspace/run_tests.sh && \
    echo 'export RUST_BACKTRACE=full' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo 'echo "Creating necessary target directories..."' >> /workspace/run_tests.sh && \
    echo 'mkdir -p /workspace/programs/target/src /workspace/programs/target/deploy /workspace/programs/target/release /workspace/programs/target/sbf-solana-solana/release /workspace/target/deploy' >> /workspace/run_tests.sh && \
    echo 'chmod -R 777 /workspace/programs/target' >> /workspace/run_tests.sh && \
    echo 'chmod -R 777 /workspace/target' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo 'echo "Running tests..."' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo '# Configure Solana CLI' >> /workspace/run_tests.sh && \
    echo 'solana config set --url http://solana-validator:8899' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh

# Add enhanced build logic to the script
RUN echo '# Build all programs' >> /workspace/run_tests.sh && \
    echo 'cd /workspace/programs' >> /workspace/run_tests.sh && \
    echo 'for dir in */; do' >> /workspace/run_tests.sh && \
    echo '  if [ -d "$dir" ] && [ "$dir" != "target/" ]; then' >> /workspace/run_tests.sh && \
    echo '    program_name=$(basename "$dir")' >> /workspace/run_tests.sh && \
    echo '    cd "$dir"' >> /workspace/run_tests.sh && \
    echo '    echo "Building $program_name"' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    # Build with cargo-build-sbf' >> /workspace/run_tests.sh && \
    echo '    cargo-build-sbf || { echo "Build failed for $program_name"; exit 1; }' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    echo "Build completed. Checking output files for $program_name..."' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    # Check where the build produced files and ensure they exist in the expected location' >> /workspace/run_tests.sh && \
    echo '    find target -name "*.so" | grep -v "deps" || echo "No .so files found in target directory"' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    # Copy compiled program to the deploy directory that Anchor expects' >> /workspace/run_tests.sh && \
    echo '    mkdir -p /workspace/target/deploy' >> /workspace/run_tests.sh && \
    echo '    for so_file in $(find target -name "*.so" | grep -v "deps"); do' >> /workspace/run_tests.sh && \
    echo '      echo "Copying $so_file to /workspace/target/deploy/"' >> /workspace/run_tests.sh && \
    echo '      cp -f "$so_file" /workspace/target/deploy/' >> /workspace/run_tests.sh && \
    echo '      filename=$(basename "$so_file")' >> /workspace/run_tests.sh && \
    echo '      echo "Copied to /workspace/target/deploy/$filename"' >> /workspace/run_tests.sh && \
    echo '      ls -la /workspace/target/deploy/$filename || echo "File not found after copy"' >> /workspace/run_tests.sh && \
    echo '    done' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    # Also copy to the programs/target/deploy directory' >> /workspace/run_tests.sh && \
    echo '    mkdir -p /workspace/programs/target/deploy' >> /workspace/run_tests.sh && \
    echo '    for so_file in $(find target -name "*.so" | grep -v "deps"); do' >> /workspace/run_tests.sh && \
    echo '      echo "Copying $so_file to /workspace/programs/target/deploy/"' >> /workspace/run_tests.sh && \
    echo '      cp -f "$so_file" /workspace/programs/target/deploy/' >> /workspace/run_tests.sh && \
    echo '      filename=$(basename "$so_file")' >> /workspace/run_tests.sh && \
    echo '      echo "Copied to /workspace/programs/target/deploy/$filename"' >> /workspace/run_tests.sh && \
    echo '      ls -la /workspace/programs/target/deploy/$filename || echo "File not found after copy"' >> /workspace/run_tests.sh && \
    echo '    done' >> /workspace/run_tests.sh && \
    echo '    ' >> /workspace/run_tests.sh && \
    echo '    cd ..' >> /workspace/run_tests.sh && \
    echo '  fi' >> /workspace/run_tests.sh && \
    echo 'done' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo '# Return to workspace and run tests' >> /workspace/run_tests.sh && \
    echo 'cd /workspace' >> /workspace/run_tests.sh && \
    echo 'ls -la target/deploy/' >> /workspace/run_tests.sh && \
    echo 'ls -la programs/target/deploy/' >> /workspace/run_tests.sh && \
    echo 'echo "Running TypeScript tests..."' >> /workspace/run_tests.sh && \
    echo 'npx ts-mocha -p ./tsconfig.json -t 1000000 tests/**/*.ts' >> /workspace/run_tests.sh

RUN chmod +x /workspace/run_tests.sh

# Set the entry point to our test script
RUN echo '# Add retry logic for connecting to the Solana validator' >> /workspace/run_tests.sh && \
    echo 'echo "Waiting for Solana validator to be available..."' >> /workspace/run_tests.sh && \
    echo 'max_attempts=30' >> /workspace/run_tests.sh && \
    echo 'attempt=1' >> /workspace/run_tests.sh && \
    echo 'while [ $attempt -le $max_attempts ]; do' >> /workspace/run_tests.sh && \
    echo '  echo "Attempt $attempt/$max_attempts: Testing connection to solana-validator:8899..."' >> /workspace/run_tests.sh && \
    echo '  if curl -s http://solana-validator:8899 -X POST -H "Content-Type: application/json" \\' >> /workspace/run_tests.sh && \
    echo '     -d "{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"getHealth\"}" | grep -q "ok"; then' >> /workspace/run_tests.sh && \
    echo '    echo "Solana validator is up and running!"' >> /workspace/run_tests.sh && \
    echo '    break' >> /workspace/run_tests.sh && \
    echo '  else' >> /workspace/run_tests.sh && \
    echo '    if [ $attempt -eq $max_attempts ]; then' >> /workspace/run_tests.sh && \
    echo '      echo "Max attempts reached. Proceeding anyway, but tests may fail."' >> /workspace/run_tests.sh && \
    echo '    else' >> /workspace/run_tests.sh && \
    echo '      echo "Validator not available yet. Waiting 5 seconds..."' >> /workspace/run_tests.sh && \
    echo '      sleep 5' >> /workspace/run_tests.sh && \
    echo '      attempt=$((attempt+1))' >> /workspace/run_tests.sh && \
    echo '    fi' >> /workspace/run_tests.sh && \
    echo '  fi' >> /workspace/run_tests.sh && \
    echo 'done' >> /workspace/run_tests.sh && \
    echo '' >> /workspace/run_tests.sh && \
    echo '# Set up the wallet' >> /workspace/run_tests.sh && \
    echo 'echo "Setting up test wallet"' >> /workspace/run_tests.sh && \
    echo 'if [ -f /workspace/setup-wallet-test.sh ]; then' >> /workspace/run_tests.sh && \
    echo '  chmod +x /workspace/setup-wallet-test.sh' >> /workspace/run_tests.sh && \
    echo '  /workspace/setup-wallet-test.sh' >> /workspace/run_tests.sh && \
    echo 'else' >> /workspace/run_tests.sh && \
    echo '  echo "Warning: setup-wallet-test.sh not found. Using default wallet setup."' >> /workspace/run_tests.sh && \
    echo '  # Configure Solana CLI' >> /workspace/run_tests.sh && \
    echo '  solana config set --url http://solana-validator:8899' >> /workspace/run_tests.sh && \
    echo '  # Create directories' >> /workspace/run_tests.sh && \
    echo '  mkdir -p /root/.config/solana' >> /workspace/run_tests.sh && \
    echo '  mkdir -p /workspace/.anchor/wallet' >> /workspace/run_tests.sh && \
    echo '  # Generate keypair' >> /workspace/run_tests.sh && \
    echo '  solana-keygen new --no-bip39-passphrase --force -o /root/.config/solana/id.json' >> /workspace/run_tests.sh && \
    echo '  cp /root/.config/solana/id.json /workspace/.anchor/wallet/wallet.json' >> /workspace/run_tests.sh && \
    echo '  WALLET_ADDRESS=$(solana address)' >> /workspace/run_tests.sh && \
    echo '  echo "Test wallet address: $WALLET_ADDRESS"' >> /workspace/run_tests.sh && \
    echo '  # Retry airdrop' >> /workspace/run_tests.sh && \
    echo '  for i in {1..5}; do' >> /workspace/run_tests.sh && \
    echo '    echo "Airdrop attempt $i..."' >> /workspace/run_tests.sh && \
    echo '    if solana airdrop 10 "$WALLET_ADDRESS"; then' >> /workspace/run_tests.sh && \
    echo '      break' >> /workspace/run_tests.sh && \
    echo '    else' >> /workspace/run_tests.sh && \
    echo '      echo "Airdrop attempt $i failed. Waiting before retry..."' >> /workspace/run_tests.sh && \
    echo '      sleep 5' >> /workspace/run_tests.sh && \
    echo '    fi' >> /workspace/run_tests.sh && \
    echo '  done' >> /workspace/run_tests.sh && \
    echo 'fi' >> /workspace/run_tests.sh

# Copy package.json files first and install dependencies
COPY package*.json ./ 
RUN npm install

# Ensure curl is installed for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Copy the rest of the code
COPY . .

# Make the setup-wallet-test.sh script executable
RUN chmod +x /workspace/setup-wallet-test.sh || true

# Set the entry point to our test script
CMD ["/workspace/run_tests.sh"]